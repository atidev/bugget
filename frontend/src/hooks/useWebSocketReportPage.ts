import { useEffect, useRef } from "react";
import {
  HubConnectionBuilder,
  HttpTransportType,
  LogLevel,
  HubConnectionState,
} from "@microsoft/signalr";

const API_URL = window.env?.API_URL || import.meta.env.VITE_BASE_URL;

const useWebSocketReportPage = (
  reportId: number,
  onNewComment: (reportId: number, bugId: number) => void,
  onReportUpdate: (reportId: number) => void
) => {
  const connectionRef = useRef<signalR.HubConnection | null>(null);
  const reportIdRef = useRef<number | null>(null);

  useEffect(() => {
    if (!reportId) {
      return;
    }

    const previousReportId = reportIdRef.current;
    if (!connectionRef.current) {
      console.log("üöÄ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SignalR...");

      connectionRef.current = new HubConnectionBuilder()
        .withUrl(`${API_URL}v1/report-page-hub`, {
          transport: HttpTransportType.WebSockets,
        })
        .withAutomaticReconnect([0, 2000, 5000, 10000])
        .configureLogging(LogLevel.Information)
        .build();

      const connection = connectionRef.current;

      connection
        .start()
        .then(() => {
          console.log("‚úÖ SignalR Connected!");
          return connection.invoke("JoinReportGroupAsync", reportId);
        })
        .then(() => console.log(`‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ: ${reportId}`))
        .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SignalR:", err));

      reportIdRef.current = reportId;

      // üìå –ü–æ–ª—É—á–∞–µ–º –±–∞–≥, –∫–æ–º–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
      connection.on("ReceiveComments", (bugId: number) => {
        console.log(
          `üîî –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –±–∞–≥–∞ ${bugId}, —Ä–µ–ø–æ—Ä—Ç–∞ ${reportIdRef.current}`
        );
        if (reportIdRef.current) onNewComment(reportIdRef.current, bugId);
      });

      // üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–∞
      connection.on("ReceiveReport", () => {
        console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞...", reportIdRef.current);
        if (reportIdRef.current) onReportUpdate(reportIdRef.current);
      });

      // ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      connection.onclose((error) => {
        console.error("‚ö†Ô∏è SignalR —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:", error || "–ù–µ—Ç –æ—à–∏–±–∫–∏");
        setTimeout(() => {
          if (connection.state === HubConnectionState.Disconnected) {
            connection
              .start()
              .catch((err) =>
                console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:", err)
              );
          }
        }, 5000);
      });
    }

    const connection = connectionRef.current;
    if (connection?.state === HubConnectionState.Connected) {
      if (previousReportId !== null) {
        console.log(`üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ –≥—Ä—É–ø–ø—ã: ${previousReportId}`);
        connection
          .invoke("LeaveReportGroupAsync", previousReportId)
          .catch((err) =>
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã:", err)
          );
      }

      console.log(`üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ: ${reportId}`);
      connection
        .invoke("JoinReportGroupAsync", reportId)
        .then(() => console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É: ${reportId}`))
        .catch((err) =>
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã SignalR:", err)
        );

      reportIdRef.current = reportId;
    }
  }, [reportId]);

  return {};
};

export default useWebSocketReportPage;
